% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_model.R
\name{fit_model}
\alias{fit_model}
\alias{summary.model_fit}
\alias{anova.model_fit}
\alias{plot.model_fit}
\alias{chart.model_fit}
\alias{as.function.model_fit}
\alias{coef.model_fit}
\alias{vcov.model_fit}
\alias{confint.model_fit}
\alias{fitted.model_fit}
\alias{residuals.model_fit}
\alias{rstandard.model_fit}
\alias{cooks.distance.model_fit}
\alias{hatvalues.model_fit}
\alias{deviance.model_fit}
\alias{AIC.model_fit}
\alias{BIC.model_fit}
\alias{family.model_fit}
\alias{nobs.model_fit}
\alias{formula.model_fit}
\alias{variable.names.model_fit}
\alias{labels.model_fit}
\title{Fit a parsnip model and manipulate it as a base R model like lm}
\usage{
fit_model(data, formula, ..., type = NULL, env = parent.frame())

\method{summary}{model_fit}(object, ...)

\method{anova}{model_fit}(object, ...)

\method{plot}{model_fit}(x, y, ...)

\method{chart}{model_fit}(data, ..., type = "model", env = parent.frame())

\method{as.function}{model_fit}(x, ...)

\method{coef}{model_fit}(object, ...)

\method{vcov}{model_fit}(object, ...)

\method{confint}{model_fit}(object, parm, level = 0.95, ...)

\method{fitted}{model_fit}(object, ...)

\method{residuals}{model_fit}(object, ...)

\method{rstandard}{model_fit}(model, ...)

\method{cooks.distance}{model_fit}(model, ...)

\method{hatvalues}{model_fit}(model, ...)

\method{deviance}{model_fit}(object, ...)

\method{AIC}{model_fit}(object, ..., k = 2)

\method{BIC}{model_fit}(object, ...)

\method{family}{model_fit}(object, ...)

\method{nobs}{model_fit}(object, ...)

\method{formula}{model_fit}(x, ...)

\method{variable.names}{model_fit}(object, ...)

\method{labels}{model_fit}(object, ...)
}
\arguments{
\item{data}{A data frame (or a \strong{model_fit} object for \code{\link[=chart]{chart()}})}

\item{formula}{A formula specifying a model}

\item{...}{Further arguments passed to the method}

\item{type}{The type of model fitting, specified by a \strong{model_spec} object
or the name of such an object in a string}

\item{env}{The environment where to evaluate \code{type}. It is \code{parent.frame()}
by default and you probably have no reasons to change it, unless you really
know what you are doing!}

\item{object}{A \strong{model_fit} object}

\item{x}{Idem}

\item{y}{Not used here}

\item{parm}{Specification of parameters for the confidence intervals (vector of numbers or of names). If missing, all parameters are considered.}

\item{level}{Confidence level required.}

\item{model}{Idem}

\item{k}{The penalty per parameter to be used in the AIC (by default, \code{k = 2}).}
}
\value{
A \strong{model_fit} object.
}
\description{
\code{\link[=fit_model]{fit_model()}} takes a \strong{model_spec} object from \{parsnip\} and
it fits is. Then, usual methods like \code{\link[=summary]{summary()}}, or \code{\link[=coef]{coef()}} can be applied
directly on it, while it can still be used as the \{tidymodels\} recommends it.
}
\examples{
library(parsnip)
data(trees, package = "datasets")

# Take the habit to prefix your regression model specs by `reg_`
reg_lm <- linear_reg(mod = "regression", engine = "lm")
trees_fit <- fit_model$reg_lm(data = trees, Volume ~ Girth)

# You can use summary(), AIC(), anova(), tidy(), glance(), etc. directly
summary(trees_fit)
anova(trees_fit)
AIC(trees_fit)
coef(trees_fit)
library(chart)
chart(trees_fit)
# etc.
}
